---
import BaseLayout from '../layouts/BaseLayout.astro';
import CurrentWeatherCard from '../components/CurrentWeatherCard.astro';
import DailyForecastSection from '../components/DailyForecastSection.astro';
import HourlyForecastSection from '../components/HourlyForecastSection.astro';
import SearchCityInput from '../components/SearchCityInput.astro';
import FavoriteCitiesDropdown from '../components/FavoriteCitiesDropdown.astro';
import Error from '../components/Error.astro';
import Loading from '../components/Loading.astro';
import { convertToTopPageUIModel } from '../utils/TopPageUIModelConverter';
import { getCurrentWeather, getForecast } from '../apis/WeatherApi';
import { TopPageUIModel } from '../uimodels/TopPageUIModel';
import BackgroundImage from '../components/BackgroundImage.astro';
// Get location from URL parameters
const searchParams = Astro.url.searchParams;
const lat = searchParams.get('lat');
const lon = searchParams.get('lon');
const city = decodeURIComponent(searchParams.get('city') ?? '');
let uiModel: TopPageUIModel;

// Determine location
if (!lat || !lon || !city) {
  uiModel = { type: 'loading' };
} else {
  const location = {
    latitude: parseFloat(lat),
    longitude: parseFloat(lon),
    city
  };

  console.log("Server side - Determined location:", location);

  try {
    // Get weather data in parallel
    const [currentWeather, forecast] = await Promise.all([
      getCurrentWeather(location.latitude, location.longitude),
      getForecast(location.latitude, location.longitude)
    ]);
    uiModel = convertToTopPageUIModel(
      currentWeather,
      forecast,
      location
    );
  } catch (error) {
    console.error("Error fetching weather data:", error);
    uiModel = { type: 'failure' };
  }
}
---

<BaseLayout>
{uiModel.type === 'success' && (
  <div class="relative h-screen w-screen overflow-hidden">
    <BackgroundImage model={uiModel.backgroundImage} />
  
  <div class="relative z-10 grid grid-cols-1 lg:grid-cols-[60%_40%] h-full w-full">
    
    {/* <div class="relative z-10 h-full flex flex-col justify-center lg:justify-end px-6 pt-10 pb-16 lg:pb-12">
    <CurrentWeatherCard model={uiModel.currentWeather} />
    
    </div> */}
    <div class="relative z-10 h-full flex flex-col justify-start px-6 pt-8 pb-16 lg:pb-12 overflow-hidden">
      
      <div class="flex flex-row justify-between items-center gap-4 mb-6">
        <div class="w-full sm:w-1/2">
          <FavoriteCitiesDropdown />
        </div>
        <div class="w-full sm:w-1/2">
          <SearchCityInput />
        </div>
      </div>

      <div class="flex-1 flex flex-col justify-center lg:justify-end">
        <CurrentWeatherCard model={uiModel.currentWeather} />
      </div>
    </div>
    
    <div class="glass p-6 lg:p-10 overflow-y-auto">
      <div class="space-y-8">
        
        <DailyForecastSection model={uiModel.dailyForecast} />
        <HourlyForecastSection model={uiModel.hourlyForecast} />
      </div>
    </div>
  </div>
</div>
)}

{uiModel.type === 'failure' && <Error />}
{uiModel.type === 'loading' && <Loading />}
</BaseLayout>

<script>
  import '../scripts/indexScript';
</script>